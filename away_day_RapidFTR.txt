Chef (and friends) on RapidFTR


What is RapidFTR?

FTR = Family Tracing and Reunification






* Purpose

  "RapidFTR helps aid workers 
   collect, sort and share 
   photographs and information 
   about children in emergency situations 
   so they can be registered for care services 
   and reunited with their families."








  "Faster paper" to streamline
   family tracing and reunification








* Non-functional Goals

 ❶ Make it easy for any organization
   to set up their own production instance,
   on their infrastructure.
 
 ❷ Host and manage
   multiple production instances
   with minimal technical staff.
 
   And maybe:
 ❸ Make it easy for any organization
   to set up their own
   hosting and management of
   multiple production instances 
   with minimal technical staff.






* Architecture (in two sentences)

  DATA COLLECTION APPLICATIONS on mobile devices
  synchronize data with the SERVER APPLICATION.

  HTML interface in the SERVER APPLICATION
  provides export, reporting, and administration.








  Today we're just talking about
  the server application.







       Logical Architecture 
     of the Server Application
    
    ┌─────────┐     ┌─────────┐
    │ CouchDB │     │   Solr  │
    └─────────┘     └─────────┘
         ↑               ↑
    ┌────┴───────────────┴────┐
    │    Rails Application    │
    └─────────────────────────┘
                 ↑
              Clients






Very Simple, but still --
  Erlang, Java, OpenSSL, Couch, Solr, 
  Passenger, Nginx, Ruby, Rubygems,
  Rake, Bundler, Git, ImageMagick,
  libxml2, libpcre, etc.
-- setup is hairy.









    Then Uganda came along
    when we weren't ready.














Chef for Uganda using the Opscode platform
* How chef works
  * Client-server architecture
    * Too boring for a diagram
  * The chef repo
    client-config
    recipes
    roles
  * Knife  
  * Anatomy of a cookbook
    <cookbook name>/
      recipes/     (eg couchdb/recipies/default.rb)
      attributes/  (eg passenger/attributes/daemon.rb)
      files/       (eg couchdb/files/default/local.ini)
      templates/   (eg passenger/templates/default/nginx.conf.erb)
* Why chef-server is an odd fit for RapidFTR

Chef-solo



The local build: vagrant
* What's vagrant?
  "a tool for building and distributing virtualized development environments"
* How the build works
  * "System Spec"

The CI build: EC2
* Why is EC2 better than vagrant for this?
  * It works on Linode
  * It more closely approximates real deployment
    * missing pieces: persistent storage, DR
* How the build works
  * Parameterized instance type
  * Parameterized AMI


Vagrant    : http://vagrantup.com/ 
             http://www.vagrantbox.es/
VirtualBox : http://www.virtualbox.org/

Chef       : http://www.opscode.com/chef/

amazon-ec2 : https://github.com/grempe/amazon-ec2

RapidFTR   : http://www.rapidftr.com/
             http://ci.rapidftr.com:8111/

